# Advent of code day day 06

```elixir
Mix.install([
  {:kino, "~> 0.5.0"}
])
```

## Setup input

```elixir
example = Kino.Input.textarea("Please paste your input example:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = Kino.Input.textarea("Please paste your real input:")
```

## parse

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
parsed =
  example
  |> Kino.Input.read()
  |> String.split("\n", trim: true)
  |> Enum.map(&(String.split(&1, "", trim: true) |> List.to_tuple()))
  |> List.to_tuple()

lines = tuple_size(parsed) - 1
cols = tuple_size(elem(parsed, 0)) - 1

grid =
  for l <- 0..lines, c <- 0..cols, into: %{} do
    {{l, c}, elem(elem(parsed, l), c)}
  end
```

```elixir
defmodule Solver do
  @dirs %{
    "^" => {{-1, 0}, "^", ">"},
    ">" => {{0, 1}, ">", "v"},
    "v" => {{1, 0}, "v", "<"},
    "<" => {{0, -1}, "<", "^"}
  }

  def part02(grid, current_pos) do
    {_, visited} = traverse(grid, current_pos, MapSet.new())

    visited = Enum.reject(visited, fn k -> k == current_pos end)

    Enum.reduce(visited, 0, fn {obstacle_y, obstacle_x}, acc ->
      modified_matrix = Map.put(grid, {obstacle_y, obstacle_x}, "O")

      case traverse(modified_matrix, current_pos, MapSet.new()) do
        :loop -> acc + 1
        _ -> acc
      end
    end)
  end

  def traverse(matrix, {y, x}, visited) do
    {{d_y, d_x}, current, rotated} = @dirs[matrix[{y, x}]]

    if MapSet.member?(visited, {{y, x}, current}) do
      :loop
    else
      updated_visited = MapSet.put(visited, {{y, x}, current})

      case matrix[{y + d_y, x + d_x}] do
        char when char == "#" or char == "O" ->
          updated_matrix = Map.put(matrix, {y, x}, rotated)
          traverse(updated_matrix, {y, x}, updated_visited)

        char when char == "." or char == "X" ->
          updated_matrix =
            matrix |> Map.put({y, x}, "X") |> Map.put({y + d_y, x + d_x}, current)

          traverse(updated_matrix, {y + d_y, x + d_x}, updated_visited)

        nil ->
          {matrix, MapSet.new(updated_visited, &elem(&1, 0))}
      end
    end
  end
end
```

## Part01

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
{pos, _v} = Enum.find(grid, fn {_k, v} -> v == "^" end)

{_, updated} = Solver.traverse(grid, pos, MapSet.new())
updated |> Enum.count
```

## Part 02

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
 Solver.part02(grid, pos)
```
